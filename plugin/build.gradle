buildscript {
    /*
     * These property group is used to build kotlinx-benchmark against Kotlin compiler snapshot.
     * How does it work:
     * When build_snapshot_train is set to true, kotlin_version property is overridden with kotlin_snapshot_version.
     * Additionally, mavenLocal is added to repository list.
     * DO NOT change the name of these properties without adapting kotlinx.train build chain.
     */
    def prop = rootProject.properties['build_snapshot_train']
    ext.build_snapshot_train = prop != null && prop != ""
    if (build_snapshot_train) {
        ext.kotlin_version = rootProject.properties['kotlin_snapshot_version']
        if (kotlin_version == null) {
            throw new IllegalArgumentException("'kotlin_snapshot_version' should be defined when building with snapshot compiler")
        }

        repositories {
            mavenLocal()
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        }
    }

    repositories {
        maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlinx/maven' }
        mavenCentral()
    }
    dependencies {
        classpath "kotlinx.team:kotlinx.team.infra:$infra_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.12.0'
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'kotlinx.team.infra'

infra {
    teamcity {
        libraryStagingRepoDescription = project.name
    }
    publishing {
        include(":")

        libraryRepoUrl = "https://github.com/Kotlin/kotlinx-benchmark"
    }
}

if (build_snapshot_train) {
    repositories {
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

println "Using Kotlin $kotlin_version for project ${project.name}"

repositories {
    mavenCentral()
    gradlePluginPortal()

    // Future replacement for kotlin-dev, with cache redirector
    maven { url "https://cache-redirector.jetbrains.com/maven.pkg.jetbrains.space/kotlin/p/kotlin/dev" }
    maven { url "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev" }
}

pluginBundle {
    website = 'https://github.com/Kotlin/kotlinx-benchmark'
    vcsUrl = 'https://github.com/Kotlin/kotlinx-benchmark.git'
    tags = ['benchmarking', 'multiplatform', 'kotlin']
}

gradlePlugin {
    plugins {
        benchmarkPlugin {
            id = "org.jetbrains.kotlinx.benchmark"
            implementationClass = "kotlinx.benchmark.gradle.BenchmarksPlugin"
            displayName = "Gradle plugin for benchmarking"
            description = "Toolkit for running benchmarks for multiplatform Kotlin code."
        }
    }
}

sourceSets {
    main {
        kotlin.srcDirs = ['main/src']
        java.srcDirs = ['main/src']
        resources.srcDirs = ['main/resources']
    }
    test {
        kotlin.srcDirs = ['test/src']
        java.srcDirs = ['test/src']
        resources.srcDirs = ['test/resources']
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        apiVersion = "1.4" // the version of Kotlin embedded in Gradle
    }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version

    compile 'com.squareup:kotlinpoet:1.3.0'
    compile "org.openjdk.jmh:jmh-core:$jmhVersion"

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-util-klib-metadata', version: kotlin_version
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-util-klib', version: kotlin_version
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-util-io', version: kotlin_version
    
    compileOnly group: 'org.jetbrains.kotlin.multiplatform', name: 'org.jetbrains.kotlin.multiplatform.gradle.plugin', version: kotlin_version
    compileOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
    compileOnly "org.openjdk.jmh:jmh-generator-bytecode:$jmhVersion" // used in worker

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation gradleTestKit()
    testImplementation "junit:junit:$junit_version"

/*
    // This is needed for test to get it on classpath and run
    runtime "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    runtime "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
*/
}

if (build_snapshot_train) {
    afterEvaluate {
        println "Manifest of kotlin-compiler-embeddable.jar for kotlinx-benchmark-plugin"
        configurations.matching { it.name == "kotlinCompilerClasspath" }.all {
            resolvedConfiguration.getFiles().findAll { it.name.contains("kotlin-compiler-embeddable") }.each {
                def manifest = zipTree(it).matching {
                    include 'META-INF/MANIFEST.MF'
                }.getFiles().first()

                manifest.readLines().each {
                    println it
                }
            }
        }
    }

    def deployVersion = properties['DeployVersion']
    if (deployVersion != null) version = deployVersion
}

// comfiguration of classpathes for plugin integration tests

configurations {
    testPluginClasspath
}

dependencies {
    testPluginClasspath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = (sourceSets.main.runtimeClasspath + configurations.testPluginClasspath).join("\n")
    }
}
